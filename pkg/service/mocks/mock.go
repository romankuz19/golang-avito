// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSection is a mock of Section interface.
type MockSection struct {
	ctrl     *gomock.Controller
	recorder *MockSectionMockRecorder
}

// MockSectionMockRecorder is the mock recorder for MockSection.
type MockSectionMockRecorder struct {
	mock *MockSection
}

// NewMockSection creates a new mock instance.
func NewMockSection(ctrl *gomock.Controller) *MockSection {
	mock := &MockSection{ctrl: ctrl}
	mock.recorder = &MockSectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSection) EXPECT() *MockSectionMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockSection) AddUser(sectionsAdd, sectionsDelete []string, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", sectionsAdd, sectionsDelete, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockSectionMockRecorder) AddUser(sectionsAdd, sectionsDelete, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockSection)(nil).AddUser), sectionsAdd, sectionsDelete, userId)
}

// Create mocks base method.
func (m *MockSection) Create(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSectionMockRecorder) Create(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSection)(nil).Create), name)
}

// Delete mocks base method.
func (m *MockSection) Delete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSectionMockRecorder) Delete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSection)(nil).Delete), name)
}

// GetUserSections mocks base method.
func (m *MockSection) GetUserSections(id int) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSections", id)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetUserSections indicates an expected call of GetUserSections.
func (mr *MockSectionMockRecorder) GetUserSections(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSections", reflect.TypeOf((*MockSection)(nil).GetUserSections), id)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUser) Create(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserMockRecorder) Create(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUser)(nil).Create), name)
}
